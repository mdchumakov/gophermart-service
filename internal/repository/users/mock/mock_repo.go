// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockRepositoryInterface) Add(ctx context.Context, login, passwordHash string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, login, passwordHash)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockRepositoryInterfaceMockRecorder) Add(ctx, login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockRepositoryInterface)(nil).Add), ctx, login, passwordHash)
}

// MockWriterRepositoryInterface is a mock of WriterRepositoryInterface interface.
type MockWriterRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockWriterRepositoryInterfaceMockRecorder
}

// MockWriterRepositoryInterfaceMockRecorder is the mock recorder for MockWriterRepositoryInterface.
type MockWriterRepositoryInterfaceMockRecorder struct {
	mock *MockWriterRepositoryInterface
}

// NewMockWriterRepositoryInterface creates a new mock instance.
func NewMockWriterRepositoryInterface(ctrl *gomock.Controller) *MockWriterRepositoryInterface {
	mock := &MockWriterRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockWriterRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriterRepositoryInterface) EXPECT() *MockWriterRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockWriterRepositoryInterface) Add(ctx context.Context, login, passwordHash string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, login, passwordHash)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockWriterRepositoryInterfaceMockRecorder) Add(ctx, login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWriterRepositoryInterface)(nil).Add), ctx, login, passwordHash)
}
